/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.connect.view;

import com.connect.audioclient.AudioClient;
import com.connect.model.ChatMessage;
import com.connect.controller.ClientController;
import com.connect.videoclient.VideoClientUI;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.beans.PropertyVetoException;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
/**
 *
 * @author jevaughnferguson
 */
public class Main extends javax.swing.JFrame {
    private final ClientController clientController;
    private AudioClient audio;
    private VideoClientUI video;
    private String chattingTo;
    //private JList<Object> list;
	DefaultListModel<Object> listModel;
    /**
     * Creates new form Main
     * @param c
     */
    public Main(ClientController c) {
        this.clientController = c;
        chattingTo = "";
        listModel = new DefaultListModel<>();
        
	initComponents();
        setLocationRelativeTo(null);
        
        this.getRootPane().setDefaultButton(jButton2);
        jTextField1.requestFocus();
        jList1.setModel(listModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jTextField1 = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jInternalFrame1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jInternalFrame1.setVisible(true);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jList1);

        jButton3.setText("Start Audio Call");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Start Video Call");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel1);

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel2.setText("Your Chat Stream");

        jTextPane1.setEnabled(false);
        jScrollPane3.setViewportView(jTextPane1);

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel3.setText("Message");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/connect/resources/attachment_icon.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/connect/resources/send_icon.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Chat", "Group chat" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTextField1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton2)))
                    .addComponent(jLabel3))
                .addContainerGap())
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                        .addGap(1, 1, 1)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextField1)))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        javax.swing.GroupLayout desktopPaneLayout = new javax.swing.GroupLayout(desktopPane);
        desktopPane.setLayout(desktopPaneLayout);
        desktopPaneLayout.setHorizontalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1)
        );
        desktopPaneLayout.setVerticalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1)
        );
        desktopPane.setLayer(jInternalFrame1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        try {
            jInternalFrame1.setMaximum(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Logout");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        jMenu3.setText("Chat");

        jMenuItem3.setText("Open Chat");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        menuBar.add(jMenu3);

        editMenu.setMnemonic('e');
        editMenu.setText("Contact");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Add Friend");
        cutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(cutMenuItem);

        jMenuItem1.setText("Friend Request");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        editMenu.add(jMenuItem1);

        jMenuItem5.setText("View all friends");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        editMenu.add(jMenuItem5);

        menuBar.add(editMenu);

        jMenu2.setText("Groups");

        jMenuItem6.setText("Create group");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Group request");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem4.setText("Manage All Groups");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        menuBar.add(jMenu2);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktopPane)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItemActionPerformed
           String s = (String)JOptionPane.showInputDialog(
            jInternalFrame1.getContentPane(),
            "Enter the username of the friend you would like to add",
            "Add User Search",
            JOptionPane.QUESTION_MESSAGE);
                //send the name to the server and check if such a user exist and set accept to false
            // will allow user to accept friend request

           if(s == null){
               //pressed cancel
               return;
           }
           if(s.trim().isEmpty()){
               JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "Please enter a username",
                            "No user enter",
                            JOptionPane.ERROR_MESSAGE);
           }
           
            clientController.sendFriendRequest(new ChatMessage(ChatMessage.REQUEST, new String[]{clientController.getClientUsername(), s}));

            
            System.out.println(s);	
    }//GEN-LAST:event_cutMenuItemActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            
            if(jList1.isSelectionEmpty()){
                JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                        "Please select a recipient of the message",
                        "No Receiever",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
        
        
            JFileChooser fileChooser = new JFileChooser();
            //fileChooser.setFileSystemView(new FileSystemView());
            fileChooser.setFileFilter(new FileNameExtensionFilter("Image files","jpg","png","jpeg"));
            File uploadedFile;
            fileChooser.showOpenDialog(null);
            uploadedFile = fileChooser.getSelectedFile();

            if (uploadedFile != null) {
            //System.out.println(uploadedFile);
                //send a message of type ChatMessage.MESSAGE --image
                //pass the file to be sent to the input stream
                FileInputStream fis;
                        try {
                        fis = new FileInputStream(uploadedFile);
                                //create a buffer of the filesize
                        byte [] buffer = new byte[fis.available()];
                        //read the file into the buffer
                        fis.read(buffer);
                MessageAlert alert = new MessageAlert();
                alert.start();
                if(jComboBox1.getSelectedIndex() == 0){
                    addImageToChatStream(buffer, TOP_ALIGNMENT);
                    clientController.sendMsgToServer(new ChatMessage(ChatMessage.IMAGEMESSAGE,buffer,new String[]{(String) jList1.getSelectedValue()}));
                }else{
                    addImageToChatStream(buffer, TOP_ALIGNMENT);
                    clientController.sendGroupToServer(new ChatMessage(ChatMessage.IMAGEBROADCAST,buffer,new String[]{(String) jList1.getSelectedValue()}));
                }
                alert.stopAlert();
                        
            } catch (IOException e1) {
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            String message = jTextField1.getText();
            // empty user name ignore it
            if(jTextField1.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                        "Please enter the message you want to send",
                        "Empty Message",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            // check if a receiver index is set in jlist
            if(jList1.isSelectionEmpty()){
                JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                        "Please select a recipient of the message",
                        "No Receiever",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
             MessageAlert alert = new MessageAlert();
            alert.start();
            //group broadast or one to one
            if(jComboBox1.getSelectedIndex() == 0){
                clientController.sendMsgToServer(new ChatMessage(ChatMessage.MESSAGE,message,new String[]{(String) jList1.getSelectedValue()}));
                addToChatStream(clientController.getClientUsername() + " : " +message, RIGHT_ALIGNMENT);
            }else{
                addToChatStream(clientController.getClientUsername() + " : " +message, RIGHT_ALIGNMENT);
                clientController.sendGroupToServer(new ChatMessage(ChatMessage.BROADCAST,message,new String[]{(String) jList1.getSelectedValue()}));
            }
            alert.stopAlert();
            jTextField1.setText("");
            
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
      
        //get request from database
        clientController.getUserRequest( new ChatMessage(ChatMessage.REQUESTINFO, new String[]{clientController.getClientUsername()}) );
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        hideAllFrames();
        jInternalFrame1.show();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        //create a group here
        
        String groupName = (String)JOptionPane.showInputDialog(jInternalFrame1.getContentPane(),
                            "Please enter the name of the group you want to create",
                            "Create Group",
                            JOptionPane.INFORMATION_MESSAGE);
        System.out.println("Creating a group name " + groupName);
        
            if(groupName == null){
               //pressed cancel
               return;
           }
           if(groupName.trim().isEmpty()){
               JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "Please enter a name for the group",
                            "Create Group",
                            JOptionPane.ERROR_MESSAGE);
               return;
           }
           
        clientController.sendCreateGroupRequest(new ChatMessage(ChatMessage.CREATEGROUP, new String[]{clientController.getClientUsername(),groupName}));
        
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
      clientController.getGroupRequest(new ChatMessage(ChatMessage.LISTGROUPREQUEST,clientController.getClientUsername()));
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        clientController.getSubsribedGroupsWithMembers(new ChatMessage(ChatMessage.LISTGROUPS, clientController.getClientUsername()));
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        clientController.getMyFriends(new ChatMessage(ChatMessage.GETFRIENDS, clientController.getClientUsername()));
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        //chat or group chat
        if(jComboBox1.getSelectedItem().toString().equalsIgnoreCase("chat")){
            
            clientController.getMyOnlineFriends(new ChatMessage(ChatMessage.AVAILABLE, new String[]{clientController.getClientUsername()}));
            listModel.removeAllElements();
            jButton3.setEnabled(true);
            jButton4.setEnabled(true);
        }else{
            clientController.getMyOnlineFriends(new ChatMessage(ChatMessage.LISTMYGROUPS, clientController.getClientUsername()));
            jButton3.setEnabled(false);
            jButton4.setEnabled(false);
        }
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //check if user already in a chat
        if( ( (JButton)evt.getSource()).getText().equalsIgnoreCase("End Audio Call") ){
            
            //if in chat
            if(audio != null){
                 clientController.stopAudioCall(new ChatMessage(ChatMessage.STOPAUDIOCHAT, chattingTo));
                 stopAudioCall();
            }
           
            return;
        }
        
        //send a user a request to chat
        //if the online users are being shown
        if(jComboBox1.getSelectedItem().toString().equalsIgnoreCase("chat")){
            
            //if a user is selected from jlist
            if(!jList1.isSelectionEmpty()){
                //send a request to join audio call
                String chatTo = (String)jList1.getSelectedValue();
                clientController.getMyOnlineFriends(new ChatMessage(ChatMessage.AUDIOCHATREQUEST, new String[]{chatTo}));
                //set up stopping call here;
                jButton3.setText("End Audio Call");
                jButton4.setEnabled(false);
                
                JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "Calling "+chatTo+", person has option to decline or accept",
                            "Chat call",
                            JOptionPane.INFORMATION_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "Please select a friend to chat with",
                            "Chat call",
                            JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "Can't make group calls",
                            "Call Chat",
                            JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
            // TODO add your handling code here:
        if(jComboBox1.getSelectedItem().toString().equalsIgnoreCase("chat")){
            
            //if a user is selected from jlist
            if(!jList1.isSelectionEmpty()){
                //send a request to join audio call
                String chatTo = (String)jList1.getSelectedValue();
                clientController.getMyOnlineFriends(new ChatMessage(ChatMessage.VIDEOCHATREQUEST, new String[]{chatTo}));
                JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "Calling "+chatTo+", person has option to decline or accept",
                            "Chat call",
                            JOptionPane.INFORMATION_MESSAGE);
                
                jButton4.setEnabled(false);
                jButton3.setEnabled(false);
            }else{
                JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "Please select a friend to chat with",
                            "Call Chat",
                            JOptionPane.ERROR_MESSAGE);
            }
            
        }else{
            JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "Can't make group calls",
                            "Call Chat",
                            JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        //this.dispose();
        clientController.sendLogoutRequest(new ChatMessage(ChatMessage.LOGOUT, clientController.getClientUsername()));
        
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        // TODO add your handling code here:
        if(jList1.isSelectionEmpty()){
            JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "Empty Selection",
                            "Info",
                            JOptionPane.ERROR_MESSAGE);
        }else{
            //show message of selected person
            String chatTo = (String)jList1.getSelectedValue();
            if(jComboBox1.getSelectedItem().toString().equalsIgnoreCase("chat")){
                
                clientController.getMessagesFor(new ChatMessage(ChatMessage.GETMESSAGES,new String[]{clientController.getClientUsername(),chatTo}));
            }else{
                //group chats
                clientController.getMessagesForGroup(new ChatMessage(ChatMessage.GETGROUPMESSAGES,new String[]{clientController.getClientUsername(),chatTo}));
            }
            
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        //seem like 0 is the enter key cause when I sout evt.getModifiers i get zero...cool
        if (evt.getModifiers() == 0){
            jButton2ActionPerformed(evt);
        }
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
       JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "Developers\nJeVaughn Ferguson\nAundre Parkinson\n",
                            "Advance Programming Project",
                            JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    public void updateOnlineUserJList(Object object, boolean empty){
            //add a new contact to list of available contacts
            //System.out.println(object+" is connected(GUI)");
            if(empty){
                    listModel.clear();
                    return;
            }
            if(!listModel.contains(object)){
                    listModel.addElement(object);
            }
		
	}
	
    public void addToChatStream(String msg, float align) throws IOException{
        try {

            //alert the user with a sound
            MessageAlert alert = new MessageAlert();
            alert.start();
            
            SimpleAttributeSet name = new SimpleAttributeSet();
            StyleConstants.setForeground(name, Color.BLACK);   
            StyleConstants.setItalic(name, true);
            StyleConstants.setBackground(name, Color.WHITE);
            StyleConstants.setAlignment(name, StyleConstants.ALIGN_RIGHT);
            StyleConstants.setBold(name, rootPaneCheckingEnabled);
            
            jTextPane1.getDocument().insertString(jTextPane1.getDocument().getLength(), msg + "\n\n", name);
            //jTextPane1.setContentType( "text/html" );
            //HTMLDocument doc=(HTMLDocument) jTextPane1.getStyledDocument();
            //doc.insertAfterEnd(doc.getCharacterElement(doc.getLength()), "<p>"+msg +"</p>" + "<br>");
            //panel.revalidate();
            // panel.repaint();
            //this.pack();
            alert.stopAlert();
        } catch (BadLocationException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
        
    public void addImageToChatStream(Object msg, float align){
            InputStream in = new ByteArrayInputStream((byte[])msg);
            BufferedImage bImageFromConvert;
            //alert the user with a sound
            MessageAlert alert = new MessageAlert();
            alert.start();
            try {
                bImageFromConvert = ImageIO.read(in);
                int type = bImageFromConvert.getType() == 0? BufferedImage.TYPE_INT_ARGB : bImageFromConvert.getType();
                ImageIcon img = new ImageIcon(resizeImage(bImageFromConvert,type));


                try {
                    jTextPane1.getDocument().insertString(jTextPane1.getDocument().getLength(), "\n\n", null);
                    //make sure the caret is position at the end of the document 
                    //so as to position the image at the end of the document as would text
                    jTextPane1.setCaretPosition(jTextPane1.getDocument().getLength());
                    jTextPane1.insertIcon ( img );
                    jTextPane1.getDocument().insertString(jTextPane1.getDocument().getLength(), "\n\n", null);
                    
                    jTextPane1.revalidate();
                    jTextPane1.repaint();
                } catch (BadLocationException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }

            } catch (IOException e) {
            }
            alert.stopAlert();
	}
	
    private static BufferedImage resizeImage(BufferedImage originalImage, int type){
        BufferedImage resizedImage = new BufferedImage(150, 150, type);
        Graphics2D g = resizedImage.createGraphics();
        g.drawImage(originalImage, 0, 0, 150, 130, null);
        g.dispose();

        return resizedImage;
    }

    public void responseToFriendRequest(Object msg) {
        
        //System.out.println("Results " + ((String[])msg)[1]);
        if(((String[])msg)[0].equalsIgnoreCase("success")){
                JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                    ((String[])msg)[1],
                    "Friend request successful sent, waiting for acceptance",
                    JOptionPane.ERROR_MESSAGE);
        }else{
                JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            ((String[])msg)[1],
                            "Friend request unsuccessful",
                            JOptionPane.ERROR_MESSAGE);
        }
    }
    
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    // End of variables declaration//GEN-END:variables

    public void showRequestFriends(Object [] userRequest) {
        
        if(userRequest ==  null || userRequest.length == 0){
            JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "No new friend request available ",
                            "Friend request",
                            JOptionPane.ERROR_MESSAGE);
        }else{
            //hideAllFrames();
            RequestView request = new RequestView(clientController, userRequest);
            //request.setMaximum(true);
            cleanUpFirst(request);
            desktopPane.add(request);
            try {
                request.setMaximum(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
       
    }

    public void cleanUpFirst(Object c){
    //remove JInternalFrame of the same type
        for(JInternalFrame inf : desktopPane.getAllFrames()){
                System.out.println(desktopPane.getAllFrames().length);
                //desktopPane.get
                System.out.println(inf.getClass());
                if(inf.getClass().equals(c.getClass() )){
                    //does get removed if it's minimize --ugh !
                    desktopPane.getDesktopManager().maximizeFrame(inf);
                    //remove it
                    desktopPane.remove(inf);
                }
            }
    }

    public void alertMessage(String[] response) {
       if(response != null){
           if(response[0].equalsIgnoreCase("success")){
               JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            response[1],
                            "Please take note",
                            JOptionPane.INFORMATION_MESSAGE);
           }else if(response[0].equalsIgnoreCase("error")){
               JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            response[1],
                            "Please take note",
                            JOptionPane.INFORMATION_MESSAGE);
           }
       }else{
           JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "Error",
                            "Please take note",
                            JOptionPane.ERROR_MESSAGE);
       }
    }

    public void showListOfGroupRequesting(String[] listOfGroups) {
        if(listOfGroups ==  null || listOfGroups.length == 0){
            JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "No groups requesting you join",
                            "Join group request",
                            JOptionPane.ERROR_MESSAGE);
        }else{
             
            GroupChatRequest request = new GroupChatRequest(clientController, listOfGroups);
            //request.setMaximum(true);
            cleanUpFirst(request);
            desktopPane.add(request);
            try {
                request.setMaximum(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void showMyGroups(Object[] listOfGroups) {
        if(listOfGroups ==  null || listOfGroups.length == 0){
            JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "You aren't part of any groups",
                            "My groups",
                            JOptionPane.ERROR_MESSAGE);
        }else{

            UserGroups request = new UserGroups(clientController, listOfGroups);
            cleanUpFirst(request);
            //request.setMaximum(true);
            desktopPane.add(request);
            try {
                request.setMaximum(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
     
    public void showTheGroups(Object[] LISTMYGROUPS) {
         
         listModel.removeAllElements();
        if(LISTMYGROUPS ==  null || LISTMYGROUPS.length == 0){
            JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "You aren't part of any groups",
                            "My groups",
                            JOptionPane.ERROR_MESSAGE);
        }else{
            //request.setMaximum(true);
           if(LISTMYGROUPS[0] != null){
            for(Object d : (ArrayList<String>)(LISTMYGROUPS[0])){
                listModel.addElement(d);
            }
        }
        if(LISTMYGROUPS[2] != null){
            for(Object d : (ArrayList<String>)(LISTMYGROUPS[2])){
                listModel.addElement(d);
            }
        }
        }
    }
    
    public void showFriends(String[] GETFRIENDS) {
       if(GETFRIENDS ==  null || GETFRIENDS.length == 0){
            JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "You aren't part of any groups",
                            "My groups",
                            JOptionPane.ERROR_MESSAGE);
        }else{
            
            AllContacts request = new AllContacts(clientController, GETFRIENDS);
            //request.setMaximum(true);
            cleanUpFirst(request);
            desktopPane.add(request);
            try {
                request.setMaximum(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    } 
     
    private void hideAllFrames() {
        for( JInternalFrame j : desktopPane.getAllFrames() ) {
            j.hide();
        }
    }

    public void optionMessage(String[] serverResponse, int type) {
       // String group = jList1.getSelectedValue().toString();
        
        if(serverResponse != null){
            //to person chatting to
           if(serverResponse[0].equalsIgnoreCase("stop")){
               JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            serverResponse[1],
                            "Please take note",
                            JOptionPane.ERROR_MESSAGE);
                            stopAudioCall();
               return;
               //to me -- tell me if it didn't stop the other users chat
           }else if(serverResponse[0].equalsIgnoreCase("stoperror")){
                JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            serverResponse[1],
                            "Please take note",
                            JOptionPane.ERROR_MESSAGE);
                return;
           }
        }
        
        
        if(serverResponse != null){
           if(serverResponse[0].equalsIgnoreCase("reject")){
               JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            serverResponse[1],
                            "Please take note",
                            JOptionPane.ERROR_MESSAGE);
               //stop the call
                            stopAudioCall();
               return;
           }else if(serverResponse[0].equalsIgnoreCase("start")){
                String clientName = ((String[])serverResponse)[1];
                String receiverName = ((String[])serverResponse)[2];
                chattingTo = clientName;
                //System.out.println("chattingTo "+chattingTo);
                
                audio = new AudioClient();
                if(audio.startAudioServer(clientName,receiverName)){
                    audio.captureAudio();
                }else{
                    JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "Audio Server not ready for connection, sorry",
                            "Please take note",
                            JOptionPane.ERROR_MESSAGE);
                }
                return;
           }
        }

        
         if(serverResponse != null){
           if(serverResponse[0].equalsIgnoreCase("success")){
               CallAlert alert = new CallAlert();
               alert.start();
                int response= JOptionPane.showConfirmDialog(jInternalFrame1.getContentPane(),
                            serverResponse[1],
                            "Call info",
                            JOptionPane.YES_NO_OPTION);
                if (response == JOptionPane.NO_OPTION || response == JOptionPane.CLOSED_OPTION) {
                    //do nothing
                    //tell other person no I don't want to talk
                    clientController.respondToCallRequest(new ChatMessage(ChatMessage.AUDIOCHAT, new String[]{"reject",clientController.getClientUsername(),serverResponse[2]}));
                    System.out.println("tell other person no I don't want to talk");
                 } else {
                    //start call
                    clientController.respondToCallRequest(new ChatMessage(ChatMessage.AUDIOCHAT, new String[]{"accept",clientController.getClientUsername(),serverResponse[2]}));
                    System.out.println("starting call...");
                    jButton3.setText("End Audio Call");
                    jButton4.setEnabled(false);
                    //controller.leaveGroup(new ChatMessage(ChatMessage.LEAVEGROUP,new String[]{controller.getClientUsername(),group}));
                }
                alert.stopAlert();
            }else{
               JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "Error can't talk right now",
                            "Please take note",
                            JOptionPane.ERROR_MESSAGE);
           }
         }else{
           JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "Error",
                            "Please take note",
                            JOptionPane.ERROR_MESSAGE);
       }
    }
       
    public void optionMessage1(String[] serverResponse, int type) {
       // String group = jList1.getSelectedValue().toString();
        if(serverResponse != null){
           if(serverResponse[0].equalsIgnoreCase("stop")){
               JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            serverResponse[1],
                            "Please take note",
                            JOptionPane.ERROR_MESSAGE);
                    stopAudioCall();
                    stopVideoCall();
               return;
           }else if(serverResponse[0].equalsIgnoreCase("stoperror")){
                JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            serverResponse[1],
                            "Please take note",
                            JOptionPane.ERROR_MESSAGE);
                return;
           }else if(serverResponse[0].equalsIgnoreCase("busy")){
               JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            serverResponse[1],
                            "Please take note",
                            JOptionPane.ERROR_MESSAGE);
            }else if(serverResponse[0].equalsIgnoreCase("not")){
               JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            serverResponse[1],
                            "Please take note",
                            JOptionPane.ERROR_MESSAGE);
               
               //restore defaults since -- can't talk
               jButton3.setEnabled(true);
               jButton3.setText("Start Audio Call");
               jButton4.setEnabled(true);
               return;
           }
        }
        
        
        if(serverResponse != null){
           if(serverResponse[0].equalsIgnoreCase("reject")){
               JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            serverResponse[1],
                            "Please take note",
                            JOptionPane.ERROR_MESSAGE);
               
               jButton3.setEnabled(true);
               jButton4.setText("Start Video Call");
               jButton4.setEnabled(true);
               return;
           }else if(serverResponse[0].equalsIgnoreCase("start")){
                String clientName = ((String[])serverResponse)[1];
                String receiverName = ((String[])serverResponse)[2];
                chattingTo = receiverName;
                
                video  = new VideoClientUI(clientController, clientName, receiverName);
                video.startVideoChat();
                
                audio = new AudioClient();
                if(audio.startAudioServer(clientName,receiverName)){
                    audio.captureAudio();
                }else{
                    JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "Audio Server not ready for connection, sorry",
                            "Please take note",
                            JOptionPane.ERROR_MESSAGE);
                }
                return ;
           }
        }

        
         if(serverResponse != null){
           if(serverResponse[0].equalsIgnoreCase("success")){
               CallAlert alert = new CallAlert();
               alert.start();
                int response= JOptionPane.showConfirmDialog(jInternalFrame1.getContentPane(),
                            serverResponse[1],
                            "Call info",
                            JOptionPane.YES_NO_OPTION);
                if (response == JOptionPane.NO_OPTION || response == JOptionPane.CLOSED_OPTION) {
                    //do nothing
                    //tell other person no I don't want to talk
                    clientController.respondToCallRequest(new ChatMessage(ChatMessage.VIDEOCHAT, new String[]{"reject",clientController.getClientUsername(),serverResponse[2]}));
                    System.out.println("tell other person no I don't want to talk");
                 } else {
                    //start call
                    clientController.respondToCallRequest(new ChatMessage(ChatMessage.VIDEOCHAT, new String[]{"accept",clientController.getClientUsername(),serverResponse[2]}));
                    System.out.println("starting call...");
                    //controller.leaveGroup(new ChatMessage(ChatMessage.LEAVEGROUP,new String[]{controller.getClientUsername(),group}));
                }
                alert.stopAlert();
            }else{
               JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "Error can't talk right now",
                            "Please take note",
                            JOptionPane.ERROR_MESSAGE);
           }
         }else{
           JOptionPane.showMessageDialog(jInternalFrame1.getContentPane(),
                            "Error",
                            "Please take note",
                            JOptionPane.ERROR_MESSAGE);
       }
    }

    private void stopAudioCall() {
        chattingTo = "";
        jButton3.setText("Start Audio Call");
        jButton4.setEnabled(true);
        if(audio != null){
            audio.stopAudiChat();
        }
        
    }

    public void logout() {
       this.dispose();
       new LoginView(clientController);
    }

    public void updateChatStream(ArrayList<String[]> GETMESSAGES, int STOPVIDEOCHAT) {
       try {
           System.out.println(GETMESSAGES);
           if(GETMESSAGES == null ){
               return;
           }
           
           //clear stream
           jTextPane1.setText("");
           
           
        for(String[] t  : GETMESSAGES){    
            addToChatStream(t[0] + " : " + t[1] ,0);
        }
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void stopVideoCall() {
        if(video !=null){
            video.stopVideo();
        }
        jButton3.setEnabled(true);
        jButton4.setText("Start Video Call");
        jButton4.setEnabled(true);
    }

    public class CallAlert extends Thread{
        URL url;
        AudioInputStream audioIn;
        Clip clip;
        public CallAlert(){
            try {
                url = this.getClass().getResource("/com/connect/resources/skype_call.wav");
                //get a input stream from the audio file passed
                audioIn = AudioSystem.getAudioInputStream(url);
                //builds a clip that will play the audio file 
                clip = AudioSystem.getClip();
            } catch (UnsupportedAudioFileException | IOException | LineUnavailableException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        @Override public void run(){
            try {
                //alllocate system resources, like speakers that will be need to play clip
                clip.open(audioIn);
                // well obviously we are now playing the sound
                clip.start();  // play once
                //yea exactly what it says
                clip.loop(Clip.LOOP_CONTINUOUSLY);  // play over and over forever
            } catch (LineUnavailableException | IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        public void stopAlert(){
            if (clip.isRunning()) clip.stop();
        }
    }
    
     public class MessageAlert extends Thread{
        URL url;
        AudioInputStream audioIn;
        Clip clip;
        public MessageAlert(){
            try {
                url = this.getClass().getResource("/com/connect/resources/skype_message_receiv.wav");
                //get a input stream from the audio file passed
                audioIn = AudioSystem.getAudioInputStream(url);
                //builds a clip that will play the audio file 
                clip = AudioSystem.getClip();
            } catch (UnsupportedAudioFileException | IOException | LineUnavailableException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        @Override public void run(){
            try {
                //alllocate system resources, like speakers that will be need to play clip
                clip.open(audioIn);
                // well obviously we are now playing the sound
                clip.start();  // play once
            } catch (LineUnavailableException | IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        public void stopAlert(){
            //should be obvious... if the sound is being played stop it... ugh 
            if (clip.isRunning()) clip.stop();
        }
    }
}
